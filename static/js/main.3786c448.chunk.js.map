{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","hooks/useContract.js","App.js","hooks/useBalance.js","hooks/useMinterContract.js","hooks/useMarketContract.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","coverImg","connect","background","minHeight","maxWidth","src","alt","Button","catch","e","console","log","client","ipfsHttpClient","createNft","minterContract","marketContract","performActions","a","price","description","ipfsImage","ownerAddress","attributes","kit","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","methods","mint","send","from","tx","tokenId","BigNumber","events","Transfer","returnValues","approve","MyNFTMarketContractAddress","MyNFTMarket","auctionPrice","ethers","utils","parseUnits","String","listToken","MyNFTContractAddress","MyNFT","uploadToIpfs","file","files","progress","prog","getNfts","nfts","getListingLength","call","nftsLength","i","nft","Promise","resolve","getListing","listing","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","index","contractOwner","seller","sold","token","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","buyNft","buyToken","value","error","COLORS","AddNfts","save","useState","setName","setPrice","setIpfsImage","setDescription","setAttributes","show","setShow","handleClose","setAttributesFunc","trait_type","attributeObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","Label","hidden","map","color","toLowerCase","Footer","disabled","NftCard","Col","Card","Badge","bg","objectFit","Text","Row","attribute","key","Loader","role","NftList","useContractKit","setNfts","loading","setLoading","nftOwner","setNftOwner","getAssets","useCallback","allNfts","addNft","toast","fetchContractOwner","_address","Add","xs","sm","lg","_nft","useContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","web3","eth","Contract","App","balance","setBalance","getBalance","getTotalBalance","useBalance","MyNFTAbi","MyNftMarketAbi","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.3786c448.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" />\n          </div>\n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={() => connect().catch((e) => console.log(e))}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\nimport MyNFTMarketContractAddress from \"../contracts/MyNFTMarket-address.json\";\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\nimport { BigNumber, ethers } from \"ethers\";\n\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport const createNft = async (\n  minterContract,\n  marketContract,\n  performActions,\n  { name, price, description, ipfsImage, ownerAddress, attributes }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      description,\n      image: ipfsImage,\n      owner: defaultAccount,\n      attributes,\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n\n      // IPFS url for uploaded metadata\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n\n      // mint the NFT and save the IPFS url to the blockchain\n      let tx = await minterContract.methods\n        .mint(url)\n        .send({ from: defaultAccount });\n      let tokenId = BigNumber.from(tx.events.Transfer.returnValues.tokenId);\n\n      await minterContract.methods\n        .approve(MyNFTMarketContractAddress.MyNFTMarket, tokenId)\n        .send({ from: defaultAccount });\n\n      const auctionPrice = ethers.utils.parseUnits(String(price), \"ether\");\n      console.log(auctionPrice);\n\n      await marketContract.methods\n        .listToken(MyNFTContractAddress.MyNFT, tokenId, auctionPrice)\n        .send({ from: defaultAccount });\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n\nexport const uploadToIpfs = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  try {\n    const added = await client.add(file, {\n      progress: (prog) => console.log(`received: ${prog}`),\n    });\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\nexport const getNfts = async (minterContract, marketContract) => {\n  try {\n    const nfts = [];\n    const nftsLength = await marketContract.methods.getListingLength().call();\n    for (let i = 0; i < Number(nftsLength); i++) {\n      const nft = new Promise(async (resolve) => {\n        const listing = await marketContract.methods.getListing(i).call();\n        const res = await minterContract.methods\n          .tokenURI(listing.tokenId)\n          .call();\n        const meta = await fetchNftMeta(res);\n        const owner = await fetchNftOwner(minterContract, listing.tokenId);\n        resolve({\n          index: i,\n          contractOwner: owner,\n          owner: listing.owner,\n          seller: listing.seller,\n          price: listing.price,\n          sold: listing.sold,\n          token: listing.token,\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          attributes: meta.data.attributes,\n        });\n      });\n      nfts.push(nft);\n    }\n    return Promise.all(nfts);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    return await axios.get(ipfsUrl);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftContractOwner = async (minterContract) => {\n  try {\n    return  await minterContract.methods.owner().call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const buyNft = async (marketContract, performActions, index) => {\n    try {\n        await performActions(async (kit) => {\n            try {\n                console.log(marketContract, index);\n              const { defaultAccount } = kit;\n              const listing = await marketContract.methods.getListing(index).call();\n\n              await marketContract.methods\n                .buyToken(index)\n                .send({ from: defaultAccount, value: listing.price });\n            } catch (error) {\n              console.log({ error });\n            }\n          });\n    } catch (error) {\n       console.log(error)\n    }\n\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\nconst COLORS = [\"Red\", \"Green\", \"White\", \"Blue\", \"Yellow\", \"Purple\"];\n\nconst AddNfts = ({ save, address }) => {\n    const [name, setName] = useState(\"\");\n    const [price, setPrice] = useState(0);\n    const [ipfsImage, setIpfsImage] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [attributes, setAttributes] = useState([]);\n    const [show, setShow] = useState(false);\n\n    const isFormFilled = () =>\n  name && ipfsImage && description && attributes.length > 2;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const { value } = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"/>\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputPrice\"\n              label=\"Price\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"Price\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setPrice(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n    type=\"file\"\n    className={\"mb-3\"}\n    onChange={async (e) => {\n        const imageUrl = await uploadToIpfs(e);\n        if (!imageUrl) {\n            alert(\"failed to upload image\");\n            return;\n        }\n        setIpfsImage(imageUrl);\n    }}\n    placeholder=\"Product name\"\n    />\n            <Form.Label>\n              <h5>Properties</h5>\n            </Form.Label>\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"background\");\n              }}\n              placeholder=\"Background\"\n            >\n              <option hidden>Background</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`background-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"color\");\n              }}\n              placeholder=\"Ponk Complexion\"\n            >\n              <option hidden>Complexion</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`comp-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"hair\");\n              }}\n              placeholder=\"Punk Hair\"\n            >\n              <option hidden>Hair</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`hair-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                price,\n                ipfsImage,\n                description,\n                ownerAddress: address,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n    save: PropTypes.func.isRequired,\n    address: PropTypes.string.isRequired,\n  };\n\n  export default AddNfts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport Identicon from \"../../ui/Identicon\";\n\n\n\nconst NftCard = ({ nft, buyNft }) => {\n  const { contractOwner, price, image, description, name, index, attributes } = nft;\n  return (\n    <Col key={index}>\n      <Card className=\" h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={contractOwner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(contractOwner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {index} ID\n            </Badge>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {price / 10 ** 18} CELO\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <div>\n            <Row className=\"mt-2\">\n              {attributes.map((attribute, key) => (\n                <Col key={key}>\n                  <div className=\"border rounded bg-light\">\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\n                      {attribute.trait_type}\n                    </div>\n                    <div className=\"text-secondary text-capitalize font-monospace\">\n                      {attribute.value}\n                    </div>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n          <div className=\"d-flex m-2 justify-content-center\">\n              <button onClick={buyNft} className=\"btn btn-primary\">Buy</button>\n          </div>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  createNft,\n  fetchNftContractOwner,\n  buyNft,\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({ minterContract, marketContract, name }) => {\n  const { performActions, address } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      const allNfts = await getNfts(minterContract, marketContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [marketContract, minterContract]);\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n      await createNft(minterContract, marketContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const buyToken = async (index) => {\n    try {\n      setLoading(true);\n      await buyNft(marketContract, performActions, index);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n              {nftOwner === address ? (\n                <AddNfts save={addNft} address={address} />\n              ) : null}\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n              {nfts.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  buyNft={()=>buyToken(_nft.index)}\n                  nft={{\n                    ..._nft,\n                  }}\n                />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\nNftList.propTypes = {\n  minterContract: PropTypes.instanceOf(Object),\n  marketContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n  marketContract: null,\n};\n\nexport default NftList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import React from \"react\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport Cover from \"./components/minter/Cover\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useBalance, useMinterContract, useMarketContract } from \"./hooks\";\nimport \"./App.css\";\n\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n  const { balance, getBalance } = useBalance();\n  const minterContract = useMinterContract();\n  const marketContract = useMarketContract()\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Nfts\n              name=\"Dripto Ponks\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n              marketContract = {marketContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"Dripto Ponks\" coverImg={\"https://cdn.vox-cdn.com/thumbor/NdyRZRTw9ml6vb_JgxQlhbjNqFE=/1400x1400/filters:format(jpeg)/cdn.vox-cdn.com/uploads/chorus_asset/file/22506332/cryptopunks_9_punks_larva_labs_nfts_at_christies_new_rvs_0409.jpg\"} connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","import { useContract } from \"./useContract\";\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\n\nexport const useMinterContract = () =>\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);\n","import { useContract } from \"./useContract\";\nimport MyNftMarketAbi from \"../contracts/MyNFTMarket.json\";\nimport MyNFTContractAddress from \"../contracts/MyNFTMarket-address.json\";\n\nexport const useMarketContract = () =>\n  useContract(MyNftMarketAbi.abi, MyNFTContractAddress.MyNFTMarket);\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Dripto Ponks\",\n        description: \"An NFT Marketplace\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}